% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ClusterModeling_datafunctions.R
\name{format_questioned_data}
\alias{format_questioned_data}
\title{format_questioned_data}
\usage{
format_questioned_data(
  formatted_model_data,
  questioned_proc_list,
  writer_indices,
  doc_indices
)
}
\arguments{
\item{formatted_model_data}{A list of formatted model training output by
\code{\link[=format_model_data]{format_model_data()}}. If clusters used by the model training graphs were
not numbered sequentially, \code{\link[=format_model_data]{format_model_data()}} relabels the clusters to
make them sequential. This is necessary so that the \code{\link[=fit_model]{fit_model()}}
function can use the cluster numbers as indices when fitting the model with
RJAGS. \code{format_questioned_data()} will relabel the clusters to match the
labels used by the model training graphs.}

\item{questioned_proc_list}{List of processed handwriting from a set of questioned
documents created by \code{get_clusterassignment()}. Each item in the list
contains the extracted graphs from a document.}

\item{writer_indices}{Vector of start and end indices for the writer id in
the document names.}

\item{doc_indices}{Vector of start and end indices for the document id in the
document names.}
}
\value{
List of data formatted analysis.
}
\description{
\code{format_questioned_data()} formats the questioned data for analysis with the
hierarchical model.
}
\examples{
model_data <- format_model_data(
  model_proc_list = example_model_clusters,
  writer_indices = c(2, 5),
  doc_indices = c(7, 18),
  a = 2, b = 0.25, c = 2, d = 2, e = 0.5
)
model <- fit_model(
  model_data = model_data,
  num_iters = 500,
  num_chains = 1
)
model <- drop_burnin(
  model = model,
  burn_in = 250
)
q_data <- format_questioned_data(
  formatted_model_data = model_data,
  questioned_proc_list = example_questioned_clusters,
  writer_indices = c(2, 5),
  doc_indices = c(7, 18)
)
analysis <- analyze_questioned_documents(
  model_data = model_data,
  model = model,
  questioned_data = q_data,
  num_cores = 2
)

}
